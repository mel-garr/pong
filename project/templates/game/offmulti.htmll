{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline-multiplayer</title>
    <style>
 
        body{
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        html, body {
            height: 100%;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            
        }
        #gamecanvas {
      
            height: 600px;
            width: 800px;
            border : 1px black solid;
            background-color: grey;
        }
    </style>
</head>
<body>
    <canvas id="gamecanvas"></canvas>
    <script type="module">
        import { Ball } from "{% static 'js/ball.js' %}";
        import { Player } from "{% static 'js/player.js' %}";
        import { Field } from "{% static 'js/field.js' %}";


        function initializeGame() {
            const canvas = document.querySelector('#gamecanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 800;
            canvas.height = 600;
            return {
                canvas,
                ctx,
                wi: canvas.width,
                hi: canvas.height
            };
        }
        let game_state = 'PLAY';

        const { canvas, ctx, wi, hi } = initializeGame();
        let boll = new Ball(wi /2,hi/2, hi ,wi);
        let P1 = new Player( wi / 80, hi / 2.5, wi / 40, hi / 5,hi, wi);
        let P2 = new Player( wi - (wi / 80 + wi / 40), hi / 2.5, wi / 40, hi / 5,hi, wi, 'ArrowUp', 'ArrowDown');
        // let map = new Field();
        

        function update(){

            // if (boll.x + boll.radius < 0)

            if (game_state == 'PLAY'){
                P1.update();
                P2.update();
                boll.update([P1, P2]);
            }
        }

        function render(){
            ctx.clearRect(0, 0, wi, hi);
            P1.draw(ctx);
            P2.draw(ctx);
            boll.draw(ctx);
        }

        function game(){
            update()
            render();
        }
        let fps = 50;

        setInterval (game, 1000 / fps)
        </script>
</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiplayer Game</title>
    <style>
        #gamecanvas{
            height : 600px;
            width : 800px;
            border : 1px black solid;
            background-color: grey;
        }

    </style>
</head>
<body>
    <h1>Welcome to the game room: {{ room.name }}</h1>
    <p>Room ID: {{ room.id }}</p>

    <input type="text" id="messageInput" placeholder="Type a message" />
    <button onclick="sendMessage()">Send Message</button>
    {% for player in game.redteamplayers %}
        print ('{{player.name}})
    {% endfor %}

    <canvas id="gamecanvas"></canvas>
    <script>
        window.onload = function(){

            const canvas = document.querySelector('#gamecanvas');
            const ctx = canvas.getContext('2d');
            let wi = 800;
            let hi = 600;
            
            function render(){
                ctx.clearRect(0, 0, wi, hi);
                {% for player in game.redteamplayers %}
                // ctx.fillStyle = {{player.paddle.color}};
                ctx.fillStyle = "red";
                //x, y, wi, hei
                ctx.fillRect(30,300,10,30);
                // ctx.fillRect({{player.paddle.x}}, {{player.paddle.y}},{{player.paddle.width}}, {{player.paddle.hight}});
                console.log({{player.paddle.x}});
                console.log({{player.paddle.y}});
                console.log({{player.paddle.width}});
                console.log({{player.paddle.hight}});
            {% endfor %}
        }
        setInterval(render, 100);
    };
    </script>
    <!-- <script type="text/javascript">
        const roomId = "{{ room.id }}";  // From the view context
        console.log("Room ID:", roomId);
        const socket = new WebSocket(`ws://${window.location.host}/ws/${roomId}/`);

        // Handle incoming messages
        socket.onmessage = function(event) {
            const data = JSON.parse(event.data);
            console.log("Message from server:", data.message);
            // You can handle the game state update here
        };

        // When the WebSocket connection is opened
        socket.onopen = function(event) {
            console.log("WebSocket is open now.");
            // Optionally, you can send a message to the server to initialize game state
            socket.send(JSON.stringify({ 'message': 'Player connected!' }));
        };

        // When the WebSocket connection is closed
        socket.onclose = function(event) {
            console.log("WebSocket is closed.");
        };

        // Handle errors
        socket.onerror = function(error) {
            console.error("WebSocket error observed:", error);
        };

        // Function to send messages to the server
        function sendMessage() {
            const message = document.getElementById("messageInput").value;
            socket.send(JSON.stringify({ 'message': message }));
        }
    </script> -->
</body>
</html>

      {% for player in game.redteamplayers %}
                    ctx.fillStyle = "{{player.paddle.color}}";
                    ctx.fillRect({{player.paddle.x}}, {{player.paddle.y}},{{player.paddle.width}}, {{player.paddle.hight}});
                
                    {% endfor %}
                {% for player in game.blueteamplayers %}
                    ctx.fillStyle = "{{player.paddle.color}}";
                    ctx.fillRect({{player.paddle.x}}, {{player.paddle.y}},{{player.paddle.width}}, {{player.paddle.hight}});

                {% endfor %}





                    <!-- <script>
            const canvas = document.querySelector('#gamecanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 800;
            canvas.height = 600;
            
            function render(){
                ctx.clearRect(0, 0, canvas.width , canvas.height);
                //pritn filed - ball then players
                ctx.fillStyle = "{{game.redfield.color}}";
                ctx.fillRect(0, 0, {{game.redfield.width}}, {{game.redfield.height}})
                ctx.fillStyle = "{{game.bluefield.color}}";
                ctx.fillRect({{game.redfield.width}}, 0, canvas.width, {{game.redfield.height}})
                {% for player in game.redteamplayers %}
                    ctx.fillStyle = "{{player.paddle.color}}";
                    ctx.fillRect({{player.paddle.x}}, {{player.paddle.y}},{{player.paddle.width}}, {{player.paddle.hight}});
                
                    {% endfor %}
                {% for player in game.blueteamplayers %}
                    ctx.fillStyle = "{{player.paddle.color}}";
                    ctx.fillRect({{player.paddle.x}}, {{player.paddle.y}},{{player.paddle.width}}, {{player.paddle.hight}});

                {% endfor %}
          
        }
        setInterval(render, 100);
        // render();
    </script> -->

       document.addEventListener('keydown', function(event){
            // event.preventDefault()
            // sendata('keydown', event.key);
            console.log('ha jan: ', event.key)
            if (document.activeElement === canvas) {
            event.preventDefault();  // Prevent default action (like scrolling)
            sendata('keydown', event.key);
        }
        });

        document.addEventListener('keyup', function(event){
                // sendata('keyup', event.key);
                if (document.activeElement === canvas) {
            event.preventDefault();  // Prevent default action (like scrolling)
            sendata('keydown', event.key);
        }
        });


                // function sendata(type, key){
        //     let mapping = keyMappings[key.toLowerCase()];
        //     if (mapping){
        //         sockett.send(JSON.stringify(
        //             {
        //                 name : mapping.player,
        //                 type : type,
        //                 action : mapping.action
        //             }
        //         ));
        //     }
        // }
    //     function sendPressedKeys() {
    // // Iterate over all the pressed keys and send data for keys marked as true
    //     Object.keys(pressedKeys).forEach(key => {
    //     if (pressedKeys[key]) {
    //         let mapping = keyMappings[key];
    //         if (mapping) {
    //             sockett.send(JSON.stringify({
    //                 name: mapping.player,
    //                 type: 'keydown',
    //                 action: mapping.action
    //             }));
    //         }
    //     }
    //     });
    //     }

                # if self.playplayer == 'blue':
            #     for k in update:
            #         if (k['action'] == 'gs'):
            #             for pl in self.blueteamplayers:
            #                 if (k['player'] == pl.name):
            #                     self.gamestatus = 'gamestart'

            # else :
            #     for k in update:
            #         if (k['action'] == 'gs'):
            #             for pl in self.redteamplayers:
            #                 if (k['player'] == pl.name):
            #                     self.gamestatus = 'gamestart'


        #     return 

            if (self.x >= 800 - self.radius) <= 0:
            PS1 += 1
            self.dx *= -1

        if (self.x - self.radius) <= 0:
            PS2 += 1
            self.dx *= -1